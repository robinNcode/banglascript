/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var banglascript_parser = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v); return o }, $V0 = [1, 18], $V1 = [1, 19], $V2 = [1, 20], $V3 = [1, 27], $V4 = [1, 12], $V5 = [1, 33], $V6 = [1, 24], $V7 = [1, 25], $V8 = [1, 26], $V9 = [1, 16], $Va = [1, 17], $Vb = [1, 21], $Vc = [1, 22], $Vd = [1, 29], $Ve = [1, 30], $Vf = [1, 31], $Vg = [1, 32], $Vh = [5, 17, 18, 19, 20, 30, 31, 41, 42, 43, 45, 49, 50, 64, 68, 72, 73, 74, 75], $Vi = [1, 38], $Vj = [1, 39], $Vk = [1, 40], $Vl = [1, 41], $Vm = [1, 42], $Vn = [1, 43], $Vo = [1, 44], $Vp = [1, 45], $Vq = [1, 46], $Vr = [1, 47], $Vs = [1, 48], $Vt = [1, 49], $Vu = [1, 51], $Vv = [8, 32, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], $Vw = [16, 32, 47], $Vx = [8, 32, 47], $Vy = [2, 67], $Vz = [2, 37], $VA = [1, 102], $VB = [1, 101], $VC = [1, 109], $VD = [20, 49, 54], $VE = [5, 17, 18, 19, 20, 30, 31, 36, 37, 41, 42, 43, 45, 49, 50, 64, 68, 72, 73, 74, 75], $VF = [5, 17, 18, 19, 20, 30, 31, 36, 37, 41, 42, 43, 45, 49, 50, 54, 64, 68, 72, 73, 74, 75];
    var parser = {
        trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "program": 3, "statement_list": 4, "EOF": 5, "statement": 6, "variable_declaration": 7, "SEMICOLON": 8, "expression": 9, "if_statement": 10, "loop_statement": 11, "function_declaration": 12, "class_declaration": 13, "var_keyword": 14, "identifier_and_type_list": 15, "ASSIGN": 16, "VAR_LET": 17, "VAR_CONST": 18, "VAR_VAR": 19, "IDENTIFIER": 20, "type_annotation": 21, ":": 22, "type": 23, "TYPE_NUMBER": 24, "TYPE_BOOLEAN": 25, "TYPE_STRING": 26, "TYPE_ARRAY": 27, "TYPE_NUMBER_ARRAY": 28, "TYPE_STRING_ARRAY": 29, "IF": 30, "LPAREN": 31, "RPAREN": 32, "block": 33, "else_if_clauses": 34, "else_clause": 35, "ELSEIF": 36, "ELSE": 37, "for_loop": 38, "while_loop": 39, "foreach_loop": 40, "FOR": 41, "WHILE": 42, "FOREACH": 43, "IN": 44, "FUNCTION": 45, "parameters": 46, "COMMA": 47, "LBRACE": 48, "RBRACE": 49, "CLASS": 50, "class_body": 51, "method_list": 52, "method_definition": 53, "CONSTRUCTOR": 54, "AND": 55, "OR": 56, "EQUALS": 57, "NOT_EQUALS": 58, "LT": 59, "GT": 60, "LTE": 61, "GTE": 62, "PLUS": 63, "MINUS": 64, "MULTIPLY": 65, "DIVIDE": 66, "unary_expression": 67, "NOT": 68, "call_expression": 69, "arguments": 70, "primary_expression": 71, "NUMBER": 72, "STRING_LITERAL": 73, "TRUE": 74, "FALSE": 75, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 8: "SEMICOLON", 16: "ASSIGN", 17: "VAR_LET", 18: "VAR_CONST", 19: "VAR_VAR", 20: "IDENTIFIER", 22: ":", 24: "TYPE_NUMBER", 25: "TYPE_BOOLEAN", 26: "TYPE_STRING", 27: "TYPE_ARRAY", 28: "TYPE_NUMBER_ARRAY", 29: "TYPE_STRING_ARRAY", 30: "IF", 31: "LPAREN", 32: "RPAREN", 36: "ELSEIF", 37: "ELSE", 41: "FOR", 42: "WHILE", 43: "FOREACH", 44: "IN", 45: "FUNCTION", 47: "COMMA", 48: "LBRACE", 49: "RBRACE", 50: "CLASS", 54: "CONSTRUCTOR", 55: "AND", 56: "OR", 57: "EQUALS", 58: "NOT_EQUALS", 59: "LT", 60: "GT", 61: "LTE", 62: "GTE", 63: "PLUS", 64: "MINUS", 65: "MULTIPLY", 66: "DIVIDE", 68: "NOT", 72: "NUMBER", 73: "STRING_LITERAL", 74: "TRUE", 75: "FALSE" },
        productions_: [0, [3, 2], [4, 2], [4, 1], [6, 2], [6, 2], [6, 1], [6, 1], [6, 1], [6, 1], [7, 4], [14, 1], [14, 1], [14, 1], [15, 1], [15, 2], [21, 2], [23, 1], [23, 1], [23, 1], [23, 1], [23, 1], [23, 1], [10, 7], [34, 6], [34, 0], [35, 2], [35, 0], [11, 1], [11, 1], [11, 1], [38, 9], [39, 5], [40, 7], [12, 6], [46, 3], [46, 1], [46, 0], [33, 3], [33, 2], [13, 3], [51, 3], [51, 2], [52, 2], [52, 1], [53, 5], [53, 5], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 1], [67, 2], [67, 2], [67, 1], [69, 4], [69, 1], [70, 3], [70, 1], [70, 0], [71, 1], [71, 1], [71, 1], [71, 1], [71, 1], [71, 3]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return { type: 'Program', body: $$[$0 - 1] };
                    break;
                case 2: case 43:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 3: case 36: case 44: case 66:
                    this.$ = [$$[$0]];
                    break;
                case 4: case 73:
                    this.$ = $$[$0 - 1];
                    break;
                case 5:
                    this.$ = { type: 'ExpressionStatement', expression: $$[$0 - 1] };
                    break;
                case 6: case 7: case 8: case 9: case 16: case 26: case 28: case 29: case 30: case 59: case 62: case 64:
                    this.$ = $$[$0];
                    break;
                case 10:
                    this.$ = { type: 'VariableDeclaration', kind: $$[$0 - 3], declarations: [{ id: $$[$0 - 2], init: $$[$0] }] };
                    break;
                case 11:
                    this.$ = 'let';
                    break;
                case 12:
                    this.$ = 'const';
                    break;
                case 13:
                    this.$ = 'var';
                    break;
                case 14:
                    this.$ = { name: $$[$0] };
                    break;
                case 15:
                    this.$ = { name: $$[$0 - 1], type: $$[$0] };
                    break;
                case 17:
                    this.$ = 'number';
                    break;
                case 18:
                    this.$ = 'boolean';
                    break;
                case 19:
                    this.$ = 'string';
                    break;
                case 20:
                    this.$ = 'array';
                    break;
                case 21:
                    this.$ = 'number[]';
                    break;
                case 22:
                    this.$ = 'string[]';
                    break;
                case 23:
                    this.$ = { type: 'IfStatement', test: $$[$0 - 4], consequent: $$[$0 - 2], elseIfs: $$[$0 - 1], alternate: $$[$0] };
                    break;
                case 24:
                    $$[$0 - 5].push({ test: $$[$0 - 2], consequent: $$[$0] });
                    break;
                case 25: case 37: case 67:
                    this.$ = [];
                    break;
                case 27:
                    this.$ = null;
                    break;
                case 31:
                    this.$ = { type: 'ForLoop', init: $$[$0 - 6], test: $$[$0 - 4], update: $$[$0 - 2], body: $$[$0] };
                    break;
                case 32:
                    this.$ = { type: 'WhileLoop', test: $$[$0 - 2], body: $$[$0] };
                    break;
                case 33:
                    this.$ = { type: 'ForEachLoop', iterator: $$[$0 - 4], iterable: $$[$0 - 2], body: $$[$0] };
                    break;
                case 34:
                    this.$ = { type: 'FunctionDeclaration', id: { name: $$[$0 - 4] }, params: $$[$0 - 2], body: $$[$0] };
                    break;
                case 35: case 65:
                    this.$ = [$$[$0 - 2], ...$$[$0]];
                    break;
                case 38:
                    this.$ = { type: 'BlockStatement', body: $$[$0 - 1] };
                    break;
                case 39:
                    this.$ = { type: 'BlockStatement', body: [] };
                    break;
                case 40:
                    this.$ = { type: 'ClassDeclaration', id: { name: $$[$0 - 1] }, body: $$[$0] };
                    break;
                case 41:
                    this.$ = { type: 'ClassBody', body: $$[$0 - 1] };
                    break;
                case 42:
                    this.$ = { type: 'ClassBody', body: [] };
                    break;
                case 45:
                    this.$ = { type: 'ConstructorMethod', params: $$[$0 - 2], body: $$[$0] };
                    break;
                case 46:
                    this.$ = { type: 'ClassMethod', id: { name: $$[$0 - 4] }, params: $$[$0 - 2], body: $$[$0] };
                    break;
                case 47:
                    this.$ = { type: 'LogicalExpression', operator: '&&', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 48:
                    this.$ = { type: 'LogicalExpression', operator: '||', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 49:
                    this.$ = { type: 'BinaryExpression', operator: '==', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 50:
                    this.$ = { type: 'BinaryExpression', operator: '!=', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 51:
                    this.$ = { type: 'BinaryExpression', operator: '<', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 52:
                    this.$ = { type: 'BinaryExpression', operator: '>', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 53:
                    this.$ = { type: 'BinaryExpression', operator: '<=', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 54:
                    this.$ = { type: 'BinaryExpression', operator: '>=', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 55:
                    this.$ = { type: 'BinaryExpression', operator: '+', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 56:
                    this.$ = { type: 'BinaryExpression', operator: '-', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 57:
                    this.$ = { type: 'BinaryExpression', operator: '*', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 58:
                    this.$ = { type: 'BinaryExpression', operator: '/', left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 60:
                    this.$ = { type: 'UnaryExpression', operator: '-', argument: $$[$0] };
                    break;
                case 61:
                    this.$ = { type: 'UnaryExpression', operator: '!', argument: $$[$0] };
                    break;
                case 63:
                    this.$ = { type: 'CallExpression', callee: { type: 'Identifier', name: $$[$0 - 3] }, arguments: $$[$0 - 1] };
                    break;
                case 68:
                    this.$ = { type: 'Identifier', name: $$[$0] };
                    break;
                case 69:
                    this.$ = { type: 'Literal', value: parseFloat(yytext) };
                    break;
                case 70:
                    this.$ = { type: 'Literal', value: yytext.slice(1, -1) };
                    break;
                case 71:
                    this.$ = { type: 'Literal', value: true };
                    break;
                case 72:
                    this.$ = { type: 'Literal', value: false };
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 17: $V0, 18: $V1, 19: $V2, 20: $V3, 30: $V4, 31: $V5, 38: 13, 39: 14, 40: 15, 41: $V6, 42: $V7, 43: $V8, 45: $V9, 50: $Va, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 1: [3] }, { 5: [1, 34], 6: 35, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 17: $V0, 18: $V1, 19: $V2, 20: $V3, 30: $V4, 31: $V5, 38: 13, 39: 14, 40: 15, 41: $V6, 42: $V7, 43: $V8, 45: $V9, 50: $Va, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, o($Vh, [2, 3]), { 8: [1, 36] }, { 8: [1, 37], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, o($Vh, [2, 6]), o($Vh, [2, 7]), o($Vh, [2, 8]), o($Vh, [2, 9]), { 15: 50, 20: $Vu }, o($Vv, [2, 59]), { 31: [1, 52] }, o($Vh, [2, 28]), o($Vh, [2, 29]), o($Vh, [2, 30]), { 20: [1, 53] }, { 20: [1, 54] }, { 20: [2, 11] }, { 20: [2, 12] }, { 20: [2, 13] }, { 9: 55, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 56, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, o($Vv, [2, 62]), { 31: [1, 57] }, { 31: [1, 58] }, { 31: [1, 59] }, o($Vv, [2, 68], { 31: [1, 60] }), o($Vv, [2, 64]), o($Vv, [2, 69]), o($Vv, [2, 70]), o($Vv, [2, 71]), o($Vv, [2, 72]), { 9: 61, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 1: [2, 1] }, o($Vh, [2, 2]), o($Vh, [2, 4]), o($Vh, [2, 5]), { 9: 62, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 63, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 64, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 65, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 66, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 67, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 68, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 69, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 70, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 71, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 72, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 73, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 16: [1, 74] }, o($Vw, [2, 14], { 21: 75, 22: [1, 76] }), { 9: 77, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 31: [1, 78] }, { 48: [1, 80], 51: 79 }, o($Vx, [2, 60], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 61], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), { 9: 81, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 9: 82, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 20: [1, 83] }, { 9: 85, 20: $V3, 31: $V5, 32: $Vy, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 70: 84, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 32: [1, 86], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, o($Vx, [2, 47], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 48], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 49], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 50], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 51], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 52], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 53], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 54], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 55], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 56], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 57], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), o($Vx, [2, 58], { 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }), { 9: 87, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, o($Vw, [2, 15]), { 23: 88, 24: [1, 89], 25: [1, 90], 26: [1, 91], 27: [1, 92], 28: [1, 93], 29: [1, 94] }, { 32: [1, 95], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, { 15: 97, 20: $Vu, 32: $Vz, 46: 96 }, o($Vh, [2, 40]), { 20: $VA, 49: [1, 99], 52: 98, 53: 100, 54: $VB }, { 8: [1, 103], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, { 32: [1, 104], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, { 44: [1, 105] }, { 32: [1, 106] }, { 32: [2, 66], 47: [1, 107], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, o($Vv, [2, 73]), { 8: [2, 10], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, o($Vw, [2, 16]), o($Vw, [2, 17]), o($Vw, [2, 18]), o($Vw, [2, 19]), o($Vw, [2, 20]), o($Vw, [2, 21]), o($Vw, [2, 22]), { 33: 108, 48: $VC }, { 32: [1, 110] }, { 32: [2, 36], 47: [1, 111] }, { 20: $VA, 49: [1, 112], 53: 113, 54: $VB }, o($Vh, [2, 42]), o($VD, [2, 44]), { 31: [1, 114] }, { 31: [1, 115] }, { 9: 116, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 33: 117, 48: $VC }, { 9: 118, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, o($Vv, [2, 63]), { 9: 85, 20: $V3, 31: $V5, 32: $Vy, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 70: 119, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, o($VE, [2, 25], { 34: 120 }), { 4: 121, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 17: $V0, 18: $V1, 19: $V2, 20: $V3, 30: $V4, 31: $V5, 38: 13, 39: 14, 40: 15, 41: $V6, 42: $V7, 43: $V8, 45: $V9, 49: [1, 122], 50: $Va, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 33: 123, 48: $VC }, { 15: 97, 20: $Vu, 32: $Vz, 46: 124 }, o($Vh, [2, 41]), o($VD, [2, 43]), { 15: 97, 20: $Vu, 32: $Vz, 46: 125 }, { 15: 97, 20: $Vu, 32: $Vz, 46: 126 }, { 8: [1, 127], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, o($Vh, [2, 32]), { 32: [1, 128], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, { 32: [2, 65] }, o($Vh, [2, 27], { 35: 129, 36: [1, 130], 37: [1, 131] }), { 6: 35, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 17: $V0, 18: $V1, 19: $V2, 20: $V3, 30: $V4, 31: $V5, 38: 13, 39: 14, 40: 15, 41: $V6, 42: $V7, 43: $V8, 45: $V9, 49: [1, 132], 50: $Va, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, o($VF, [2, 39]), o($Vh, [2, 34]), { 32: [2, 35] }, { 32: [1, 133] }, { 32: [1, 134] }, { 9: 135, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, { 33: 136, 48: $VC }, o($Vh, [2, 23]), { 31: [1, 137] }, { 33: 138, 48: $VC }, o($VF, [2, 38]), { 33: 139, 48: $VC }, { 33: 140, 48: $VC }, { 32: [1, 141], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, o($Vh, [2, 33]), { 9: 142, 20: $V3, 31: $V5, 64: $Vb, 67: 11, 68: $Vc, 69: 23, 71: 28, 72: $Vd, 73: $Ve, 74: $Vf, 75: $Vg }, o($Vh, [2, 26]), o($VD, [2, 45]), o($VD, [2, 46]), { 33: 143, 48: $VC }, { 32: [1, 144], 55: $Vi, 56: $Vj, 57: $Vk, 58: $Vl, 59: $Vm, 60: $Vn, 61: $Vo, 62: $Vp, 63: $Vq, 64: $Vr, 65: $Vs, 66: $Vt }, o($Vh, [2, 31]), { 33: 145, 48: $VC }, o($VE, [2, 24])],
        defaultActions: { 18: [2, 11], 19: [2, 12], 20: [2, 13], 34: [2, 1], 119: [2, 65], 124: [2, 35] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            //_token_stack:
            var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                        + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "no-case-insensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:/* skip whitespace */
                        break;
                    case 1: return 17
                        break;
                    case 2: return 18
                        break;
                    case 3: return 19
                        break;
                    case 4: return 24
                        break;
                    case 5: return 25
                        break;
                    case 6: return 26
                        break;
                    case 7: return 27
                        break;
                    case 8: return 28
                        break;
                    case 9: return 29
                        break;
                    case 10: return 30
                        break;
                    case 11: return 36
                        break;
                    case 12: return 37
                        break;
                    case 13: return 45
                        break;
                    case 14: return 'RETURN'
                        break;
                    case 15: return 41
                        break;
                    case 16: return 42
                        break;
                    case 17: return 43
                        break;
                    case 18: return 50
                        break;
                    case 19: return 54
                        break;
                    case 20: return 'NEW'
                        break;
                    case 21: return 72
                        break;
                    case 22: return 73
                        break;
                    case 23: return 74
                        break;
                    case 24: return 75
                        break;
                    case 25: return 20
                        break;
                    case 26: return 31
                        break;
                    case 27: return 32
                        break;
                    case 28: return 48
                        break;
                    case 29: return 49
                        break;
                    case 30: return 'LBRACKET'
                        break;
                    case 31: return 'RBRACKET'
                        break;
                    case 32: return 8
                        break;
                    case 33: return 47
                        break;
                    case 34: return 'DOT'
                        break;
                    case 35: return 16
                        break;
                    case 36: return 63
                        break;
                    case 37: return 64
                        break;
                    case 38: return 65
                        break;
                    case 39: return 66
                        break;
                    case 40: return 57
                        break;
                    case 41: return 58
                        break;
                    case 42: return 59
                        break;
                    case 43: return 60
                        break;
                    case 44: return 61
                        break;
                    case 45: return 62
                        break;
                    case 46: return 55
                        break;
                    case 47: return 56
                        break;
                    case 48: return 68
                        break;
                    case 49: return 5
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:ধরি)/, /^(?:ধ্রুবক)/, /^(?:চলক)/, /^(?:সংখ্যা)/, /^(?:হাছামিছা)/, /^(?:দড়ি)/, /^(?:বিন্যাস)/, /^(?:সংখ্যা_বিন্যাস)/, /^(?:দড়ি_বিন্যাস)/, /^(?:যদি)/, /^(?:নয়তোযদি)/, /^(?:নয়তো)/, /^(?:কাঠামো)/, /^(?:ফেরত)/, /^(?:জন্য)/, /^(?:যতক্ষণ)/, /^(?:প্রত্যেকেরজন্য)/, /^(?:শ্রেণী)/, /^(?:নির্মাতা)/, /^(?:নতুন)/, /^(?:[0-9]+(\.[0-9]+)?)/, /^(?:"[^\"]*")/, /^(?:সত্য)/, /^(?:মিথ্যা)/, /^(?:[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)*)/, /^(?:\()/, /^(?:\))/, /^(?:\{)/, /^(?:\})/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?:,)/, /^(?:\.)/, /^(?:=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:==)/, /^(?:!=)/, /^(?:<)/, /^(?:>)/, /^(?:<=)/, /^(?:>=)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:!)/, /^(?:$)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser; parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = banglascript_parser;
    exports.Parser = banglascript_parser.Parser;
    exports.parse = function () { return banglascript_parser.parse.apply(banglascript_parser, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}

export default banglascript_parser;